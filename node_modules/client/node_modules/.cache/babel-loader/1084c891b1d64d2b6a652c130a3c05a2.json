{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from 'reselect';\nimport * as actions from './api';\nlet lastId = 0;\nconst slice = createSlice({\n  name: 'bugs',\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  reducers: {\n    bugAdded: (bugs, action) => {\n      bugs.list.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    bugResolved: (bugs, action) => {\n      const index = bugs.list.findIndex(bug => bug.id == action.payload.id);\n      bugs.list[index].resolved = true;\n    },\n    bugReceived: (bugs, action) => {\n      bugs.list = action.payload;\n    }\n  }\n});\nexport const {\n  bugAdded,\n  bugResolved,\n  bugReceived\n} = slice.actions;\nexport const bugsReducer = slice.reducer;\nexport const getUnresolvedBugs = createSelector(state => state.entities.bugs, state => state.entities.projects, (bugs, projects) => bugs.filter(bug => !bug.resolved));\nconst url = \"/bugs\";\nexport const loadBugs = () => actions.apiCallBegan({\n  url,\n  onSuccess: slice.actions.bugReceived.type\n});","map":{"version":3,"sources":["/home/adesbarat000/redux-test/client/src/store/bugs.js"],"names":["createSlice","createSelector","actions","lastId","slice","name","initialState","list","loading","lastFetch","reducers","bugAdded","bugs","action","push","id","description","payload","resolved","bugResolved","index","findIndex","bug","bugReceived","bugsReducer","reducer","getUnresolvedBugs","state","entities","projects","filter","url","loadBugs","apiCallBegan","onSuccess","type"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAAQC,cAAR,QAA6B,UAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,OAAzB;AAEA,IAAIC,MAAM,GAAG,CAAb;AAEA,MAAMC,KAAK,GAAGJ,WAAW,CAAC;AACtBK,EAAAA,IAAI,EAAE,MADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,OAAO,EAAE,KAFC;AAGVC,IAAAA,SAAS,EAAE;AAHD,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxBD,MAAAA,IAAI,CAACL,IAAL,CAAUO,IAAV,CAAe;AACXC,QAAAA,EAAE,EAAEZ,MAAM,EADC;AAEXa,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFjB;AAGXE,QAAAA,QAAQ,EAAE;AAHC,OAAf;AAKH,KAPK;AAQNC,IAAAA,WAAW,EAAE,CAACP,IAAD,EAAOC,MAAP,KAAkB;AAC3B,YAAMO,KAAK,GAAGR,IAAI,CAACL,IAAL,CAAUc,SAAV,CAAoBC,GAAG,IAAIA,GAAG,CAACP,EAAJ,IAAUF,MAAM,CAACI,OAAP,CAAeF,EAApD,CAAd;AACAH,MAAAA,IAAI,CAACL,IAAL,CAAUa,KAAV,EAAiBF,QAAjB,GAA4B,IAA5B;AACH,KAXK;AAYNK,IAAAA,WAAW,EAAE,CAACX,IAAD,EAAOC,MAAP,KAAkB;AAC3BD,MAAAA,IAAI,CAACL,IAAL,GAAYM,MAAM,CAACI,OAAnB;AACH;AAdK;AAPY,CAAD,CAAzB;AAyBA,OAAO,MAAM;AAACN,EAAAA,QAAD;AAAWQ,EAAAA,WAAX;AAAwBI,EAAAA;AAAxB,IAAuCnB,KAAK,CAACF,OAAnD;AACP,OAAO,MAAMsB,WAAW,GAAGpB,KAAK,CAACqB,OAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAGzB,cAAc,CAC3C0B,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAehB,IADmB,EAE3Ce,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,QAFmB,EAG3C,CAACjB,IAAD,EAAOiB,QAAP,KAAoBjB,IAAI,CAACkB,MAAL,CAAYR,GAAG,IAAI,CAACA,GAAG,CAACJ,QAAxB,CAHuB,CAAxC;AAKP,MAAMa,GAAG,GAAG,OAAZ;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM9B,OAAO,CAAC+B,YAAR,CAAqB;AAC/CF,EAAAA,GAD+C;AAE/CG,EAAAA,SAAS,EAAE9B,KAAK,CAACF,OAAN,CAAcqB,WAAd,CAA0BY;AAFU,CAArB,CAAvB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport {createSelector} from 'reselect';\nimport * as actions from './api'\n\nlet lastId = 0;\n\nconst slice = createSlice({\n    name: 'bugs',\n    initialState: {\n        list: [],\n        loading: false,\n        lastFetch: null\n    },\n    reducers: {\n        bugAdded: (bugs, action) => {\n            bugs.list.push({\n                id: lastId ++,\n                description: action.payload.description,\n                resolved: false\n            })\n        },\n        bugResolved: (bugs, action) => {\n            const index = bugs.list.findIndex(bug => bug.id == action.payload.id);\n            bugs.list[index].resolved = true;\n        },\n        bugReceived: (bugs, action) => {\n            bugs.list = action.payload;\n        }\n    }\n})\n\nexport const {bugAdded, bugResolved, bugReceived} = slice.actions;\nexport const bugsReducer = slice.reducer;\nexport const getUnresolvedBugs = createSelector( \n    state => state.entities.bugs,\n    state => state.entities.projects,\n    (bugs, projects) => bugs.filter(bug => !bug.resolved)\n)\nconst url = \"/bugs\";\nexport const loadBugs = () => actions.apiCallBegan({\n    url,\n    onSuccess: slice.actions.bugReceived.type\n});"]},"metadata":{},"sourceType":"module"}