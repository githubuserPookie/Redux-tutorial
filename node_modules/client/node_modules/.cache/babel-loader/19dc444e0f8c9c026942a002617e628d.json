{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from 'reselect';\nlet lastId = 0;\nconst slice = createSlice({\n  name: 'bugs',\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  reducers: {\n    bugAdded: (bugs, action) => {\n      bugs.list.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    bugResolved: (bugs, action) => {\n      const index = bugs.list.findIndex(bug => bug.id == action.payload.id);\n      bugs[index].resolved = true;\n    }\n  }\n});\nexport const {\n  bugAdded,\n  bugResolved\n} = slice.actions;\nexport const bugsReducer = slice.reducer;\nexport const getUnresolvedBugs = createSelector(state => state.entities.bugs, state => state.entities.projects, (bugs, projects) => bugs.filter(bug => !bug.resolved));","map":{"version":3,"sources":["/home/adesbarat000/redux-test/client/src/store/bugs.js"],"names":["createSlice","createSelector","lastId","slice","name","initialState","list","loading","lastFetch","reducers","bugAdded","bugs","action","push","id","description","payload","resolved","bugResolved","index","findIndex","bug","actions","bugsReducer","reducer","getUnresolvedBugs","state","entities","projects","filter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,IAAIC,MAAM,GAAG,CAAb;AAEA,MAAMC,KAAK,GAAGH,WAAW,CAAC;AACtBI,EAAAA,IAAI,EAAE,MADgB;AAEtBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,OAAO,EAAE,KAFC;AAGVC,IAAAA,SAAS,EAAE;AAHD,GAFQ;AAOtBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxBD,MAAAA,IAAI,CAACL,IAAL,CAAUO,IAAV,CAAe;AACXC,QAAAA,EAAE,EAAEZ,MAAM,EADC;AAEXa,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFjB;AAGXE,QAAAA,QAAQ,EAAE;AAHC,OAAf;AAKH,KAPK;AAQNC,IAAAA,WAAW,EAAE,CAACP,IAAD,EAAOC,MAAP,KAAkB;AAC3B,YAAMO,KAAK,GAAGR,IAAI,CAACL,IAAL,CAAUc,SAAV,CAAoBC,GAAG,IAAIA,GAAG,CAACP,EAAJ,IAAUF,MAAM,CAACI,OAAP,CAAeF,EAApD,CAAd;AACAH,MAAAA,IAAI,CAACQ,KAAD,CAAJ,CAAYF,QAAZ,GAAuB,IAAvB;AACH;AAXK;AAPY,CAAD,CAAzB;AAsBA,OAAO,MAAM;AAACP,EAAAA,QAAD;AAAWQ,EAAAA;AAAX,IAA0Bf,KAAK,CAACmB,OAAtC;AACP,OAAO,MAAMC,WAAW,GAAGpB,KAAK,CAACqB,OAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAGxB,cAAc,CAC3CyB,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAehB,IADmB,EAE3Ce,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,QAFmB,EAG3C,CAACjB,IAAD,EAAOiB,QAAP,KAAoBjB,IAAI,CAACkB,MAAL,CAAYR,GAAG,IAAI,CAACA,GAAG,CAACJ,QAAxB,CAHuB,CAAxC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport {createSelector} from 'reselect';\n\nlet lastId = 0;\n\nconst slice = createSlice({\n    name: 'bugs',\n    initialState: {\n        list: [],\n        loading: false,\n        lastFetch: null\n    },\n    reducers: {\n        bugAdded: (bugs, action) => {\n            bugs.list.push({\n                id: lastId ++,\n                description: action.payload.description,\n                resolved: false\n            })\n        },\n        bugResolved: (bugs, action) => {\n            const index = bugs.list.findIndex(bug => bug.id == action.payload.id);\n            bugs[index].resolved = true;\n        }\n    }\n})\n\nexport const {bugAdded, bugResolved} = slice.actions;\nexport const bugsReducer = slice.reducer;\nexport const getUnresolvedBugs = createSelector( \n    state => state.entities.bugs,\n    state => state.entities.projects,\n    (bugs, projects) => bugs.filter(bug => !bug.resolved)\n)"]},"metadata":{},"sourceType":"module"}